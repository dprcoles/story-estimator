generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Players {
  id          Int       @id @default(autoincrement())
  defaultType String    @map("default_type")
  emoji       String
  name        String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  votes      Votes[]
  spectators Spectators[]

  @@map("players")
}

model Sessions {
  id        Int       @id @default(autoincrement())
  name      String
  playerIds Int[]     @map("player_ids")
  teamId    Int       @map("team_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  active    Boolean   @default(false)

  team    Teams     @relation(fields: [teamId], references: [id])
  stories Stories[]

  @@map("sessions")
}

model Stories {
  id             Int       @id @default(autoincrement())
  description    String
  estimate       String?
  startSeconds   Int?      @map("start_seconds")
  endSeconds     Int?      @map("end_seconds")
  totalTimeSpent Int?      @map("total_time_spent")
  sessionId      Int       @map("session_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  session    Sessions     @relation(fields: [sessionId], references: [id])
  votes      Votes[]
  spectators Spectators[]

  @@map("stories")
}

model Votes {
  id        Int       @id @default(autoincrement())
  storyId   Int       @map("story_id")
  playerId  Int       @map("player_id")
  vote      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  player Players @relation(fields: [playerId], references: [id])
  story  Stories @relation(fields: [storyId], references: [id])

  @@map("votes")
}

model Spectators {
  id        Int       @id @default(autoincrement())
  storyId   Int       @map("story_id")
  playerId  Int       @map("player_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  player Players @relation(fields: [playerId], references: [id])
  story  Stories @relation(fields: [storyId], references: [id])

  @@map("spectators")
}

model Teams {
  id             Int       @id @default(autoincrement())
  name           String
  alias          String    @unique
  organisationId Int       @map("organisation_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  organisation      Organisations     @relation(fields: [organisationId], references: [id])
  integrations_jira JiraIntegrations?
  sessions          Sessions[]

  @@map("teams")
}

model Organisations {
  id        Int       @id @default(autoincrement())
  alias     String    @unique
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  teams Teams[]

  @@map("organisations")
}

model JiraIntegrations {
  id             Int       @id @default(autoincrement())
  teamId         Int       @unique @map("team_id")
  apiToken       String    @map("api_token")
  configuredById Int       @map("configured_by_id")
  domain         String
  email          String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  team        Teams        @relation(fields: [teamId], references: [id])
  jql_queries JqlQueries[]

  @@map("integrations_jira")
}

model JqlQueries {
  id            Int       @id @default(autoincrement())
  integrationId Int       @map("integration_id")
  name          String
  query         String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  integration JiraIntegrations @relation(fields: [integrationId], references: [id])

  @@map("jql_queries")
}
